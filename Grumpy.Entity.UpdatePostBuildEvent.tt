<#@ template language="C#" debug="true" hostspecific="true" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".txt" #>Checking for MS SQL Project and updating PostBuildEvent
<#
var solutionDir = Host.ResolveAssemblyReference("$(solutionDir)");
var sqlProject = Directory.EnumerateFiles(solutionDir, "*.sqlproj", SearchOption.AllDirectories).SingleOrDefault();

if (sqlProject != null)
{
#>Project file found <#= sqlProject #>
<#
    var xmlDocument = new XmlDocument();

    xmlDocument.Load(sqlProject);

    var projectNode = GetFromPath(xmlDocument, "Project");

    if (projectNode != null)
    {
        var postBuildEventNode = GetFromPath(projectNode.ChildNodes, "PropertyGroup/PostBuildEvent");

        if (postBuildEventNode == null)
        {
            var propertyGroupNode = projectNode.AppendChild(xmlDocument.CreateElement("PropertyGroup", projectNode.NamespaceURI));

            postBuildEventNode = propertyGroupNode.AppendChild(xmlDocument.CreateElement("PostBuildEvent", projectNode.NamespaceURI));
        }

        const string postBuildEvent = @"powershell -file $(SolutionDir)\PublishDacpac.ps1 -TargetPath $(TargetPath) -ProjectDir $(ProjectDir) -ProjectName $(ProjectName)";

        if (postBuildEventNode.InnerText != postBuildEvent)
        {
#>Project updated!
<#
            postBuildEventNode.InnerText = postBuildEvent;
            xmlDocument.Save(sqlProject);
        }
		else 
		{
#>Project not updated!
<#
		}
    }
}

XmlNode GetFromPath(IEnumerable xmlNodes, string path)
{
    var pos = path.IndexOf('/');
    var firstPart = pos >= 0 ? path.Substring(0, pos) : path;
    var lastPart = pos >= 0 ? path.Substring(pos + 1) : "";

    if (!string.IsNullOrEmpty(firstPart))
    {
        foreach (XmlNode node in xmlNodes)
        {
            if (node.Name == firstPart)
            {
                if (string.IsNullOrEmpty(lastPart))
                    return node;

                var currentNode = GetFromPath(node.ChildNodes, lastPart);

                if (currentNode != null)
                    return currentNode;
            }
        }
    }

    return null;
}
#>