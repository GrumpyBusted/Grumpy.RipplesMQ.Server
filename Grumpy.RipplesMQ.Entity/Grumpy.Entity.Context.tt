<#@ template debug="false" hostspecific="true" language="C#" #><#@ 
import namespace="System.Collections" #><#@
output extension=".cs" #><#@ 
include file="EF6.Utility.CS.ttinclude"#>//--------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//--------------------------------------------------------------------------------
<#
var projectDir = Host.ResolveAssemblyReference("$(ProjectDir)");
var modelFiles = Directory.EnumerateFiles(projectDir).Where(f => f.EndsWith(".edmx"));
var modelAssembly = Path.GetFileNameWithoutExtension(Host.ResolveAssemblyReference("$(TargetPath)"));
var textTransform = DynamicTextTransformation.Create(this);
var code = new CodeGenerationTools(this);
var loader = new EdmMetadataLoader(textTransform.Host, textTransform.Errors);

if (!modelFiles.Any()) 
    return "// No Entity Framework Model (.edmx) found"; 

var codeNamespace = code.VsNamespaceSuggestion();
var	fileManager = EntityFrameworkTemplateFileManager.Create(this);

foreach (var modelFile in modelFiles)
{
    var modelName = Path.GetFileNameWithoutExtension(modelFile);
    var fileName = $"{modelName}.Entity.Context.cs";
    var itemCollection = loader.CreateEdmItemCollection(modelFile);
    var container = itemCollection.OfType<EntityContainer>().FirstOrDefault();
    
	if (container != null)
	{
        fileManager.StartNewFile(fileName);
        
		#>//--------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//--------------------------------------------------------------------------------

<#
        if (!string.IsNullOrEmpty(codeNamespace))
        {
        #>namespace <#=code.EscapeNamespace(codeNamespace)#>
{
<#
        }
#>    using Microsoft.Extensions.Logging;
    using Microsoft.Extensions.Logging.Abstractions;
    using Grumpy.Entity.Interfaces;
    using Grumpy.Logging;

    public partial class <#=container.Name#>
    {
	    public ILogger Logger { get; } = NullLogger.Instance;

        public <#=container.Name#>(ILogger logger, IEntityConnectionConfig entityConnectionConfig) : base(entityConnectionConfig.ConnectionString("<#=modelAssembly#>", "<#=modelName#>"))
        {
		    Logger = logger;
			Logger.Information("Creating Context for <#=container.Name#> {ConnectionString}", entityConnectionConfig.ConnectionString("<#=modelAssembly#>", "<#=modelName#>"));

            EntityFrameworkReferenceHack();
        }

        public <#=container.Name#>(IEntityConnectionConfig entityConnectionConfig) : base(entityConnectionConfig.ConnectionString("<#=modelAssembly#>", "<#=modelName#>"))
        {
            EntityFrameworkReferenceHack();
        }

        private void EntityFrameworkReferenceHack()
        {
#pragma warning disable S1481
            // NOTE: Using type from EntityFramework.SqlServer to ensure copy of dll to all application using this dll
            // ReSharper disable once UnusedVariable
            var instance = System.Data.Entity.SqlServer.SqlProviderServices.Instance;
#pragma warning restore S1481
        }
    }
<#
        if (!String.IsNullOrEmpty(codeNamespace))
        {
            #>}
<#
        }
	}
}

fileManager.Process();
#>
<#+
public static void ArgumentNotNull<T>(T arg, string name) where T : class
{
    if (arg == null)
    {
        throw new ArgumentNullException(name);
    }
}
#>